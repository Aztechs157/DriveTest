// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.DriveTest.subsystems;

import org.usfirst.frc157.DriveTest.RobotMap;
import org.usfirst.frc157.DriveTest.commands.*;
import org.usfirst.frc157.DriveTest.commands.TeleopDrive;

import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class FourWheelDrive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    private final CANJaguar cANJaguar1 = RobotMap.fourWheelDriveCANJaguar1;
//    private final CANJaguar cANJaguar2 = RobotMap.fourWheelDriveCANJaguar2;
//    private final CANJaguar cANJaguar3 = RobotMap.fourWheelDriveCANJaguar3;
//    private final CANJaguar cANJaguar4 = RobotMap.fourWheelDriveCANJaguar4;
    private final RobotDrive drive4x4 = RobotMap.fourWheelDriveDrive4x4;
//
//    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//
//
//    // Put methods for controlling this subsystem
//    // here. Call these from Commands.
//
//    public void initDefaultCommand() {
//        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
//
//
//        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
//
//        // Set the default command for a subsystem here.
//        setDefaultCommand(new Maneuver());
//    }
    public void drive(GenericHID stick)
    {
    	drive4x4.arcadeDrive(stick, true);
    }
 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftDriveA = RobotMap.talon3;//3
    private final CANTalon leftDriveB = RobotMap.talon1;//1
    private final CANTalon rightDriveA = RobotMap.talon5;//5
    private final CANTalon rightDriveB = RobotMap.talon7;//7
//    private final Encoder leftEncoder = RobotMap.driveLeftEncoder;
//    private final Encoder rightEncoder = RobotMap.driveRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new TeleopDrive());
   }
    
    public FourWheelDrive()
    {
        // Set Talon Modes
        configureControllers();
    }
    
    public void setLeftDrive(double drive)
    {
        leftDriveA.set(drive);
    }

    public void setRightDrive(double drive)
    {
        rightDriveA.set(drive);     
    }
    
    public void configureControllers()
    {
        System.out.println("Configuring Controllers!");
        leftDriveA.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
        rightDriveA.changeControlMode(CANTalon.TalonControlMode.PercentVbus);

        // Set the followers
        leftDriveB.changeControlMode(CANTalon.TalonControlMode.Follower);
        leftDriveB.set(leftDriveA.getDeviceID());
        //leftDriveB.reverseOutput(false);
        rightDriveB.changeControlMode(CANTalon.TalonControlMode.Follower);
        rightDriveB.set(rightDriveA.getDeviceID());
        //rightDriveB.reverseOutput(false);
        
        // TODO consider setting ramp rate
    }
    
    //TODO Motors must be wired so that Positive Power increases encoder count
}




