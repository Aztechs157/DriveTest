// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.DriveTest.subsystems;

import org.usfirst.frc157.DriveTest.RobotMap;
import org.usfirst.frc157.DriveTest.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class FourWheelDrive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANJaguar cANJaguar1 = RobotMap.fourWheelDriveCANJaguar1;
    private final CANJaguar cANJaguar2 = RobotMap.fourWheelDriveCANJaguar2;
    private final CANJaguar cANJaguar3 = RobotMap.fourWheelDriveCANJaguar3;
    private final CANJaguar cANJaguar4 = RobotMap.fourWheelDriveCANJaguar4;
    private final Timer t2 = RobotMap.t1;
    private final RobotDrive drive4x4 = RobotMap.fourWheelDriveDrive4x4;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new Maneuver());
    }
    public void drive(GenericHID stick)
    {
    	drive4x4.arcadeDrive(stick, true);
    }
    public boolean isInLast(){
        if(t2.getMatchTime()>=130)
            return true;
        else
            return false;
    }
    
}

